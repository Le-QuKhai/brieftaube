name: Build, Package, and Deploy to VM

on:
  push:
    branches:
      - fVMproxy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Project with Gradle
        run: ./gradlew build

      # STEP 1: Create a self-contained deployment package
      - name: ðŸ“¦ Prepare Deployment Package
        run: |
          mkdir -p deployment
          cp build/libs/app.jar deployment/
          cp docker-compose.yml deployment/
          cp Dockerfile deployment/
          cp Dockerfile.proxy deployment/

      # STEP 2: Copy the SINGLE deployment folder
      - name: ðŸšš Copy Deployment Package to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: usershell.informatik.haw-hamburg.de
          proxy_username: infwax193
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment" # Copy the single folder
          target: "/home/${{ secrets.VM_USERNAME }}/brieftaube"
          rm: true # Remove the target directory before copying for a clean slate

      # STEP 3: Execute the deployment script on the server
      - name: ðŸš€ Deploy on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: usershell.informatik.haw-hamburg.de
          proxy_username: infwax193
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate into the newly copied deployment directory
            cd /home/${{ secrets.VM_USERNAME }}/brieftaube/deployment

            # Build and start services from within this directory
            docker compose down --volumes
            docker compose build --no-cache
            docker compose up -d

            echo "âœ… Deployment Finished."