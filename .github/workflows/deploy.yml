name: Build, Test and Deploy to University VM via Jump Host

on:
  push:
    branches:
      - fVMproxy

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build and Test the project
        run: ./gradlew build

      # STEP 1: Copy necessary files from the Runner to the VM
      - name: ðŸšš Copy deployment files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22

          # --- Jump Host Credentials ---
          proxy_host: usershell.informatik.haw-hamburg.de
          proxy_username: infwax193
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }} # Assumes same key for jump and VM

          # --- Files to copy ---
          source: "build/libs/*.jar,docker-compose.yml,Dockerfile.proxy,.env" # Comma-separated list of files
          target: "/home/${{ secrets.VM_USERNAME }}/brieftaube"
          strip_components: 1 # Removes the 'build/libs' part of the path on the server

      # STEP 2: Execute the deployment script on the VM
      - name: ðŸš€ Run deployment script on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

          # --- Jump Host Credentials ---
          proxy_host: usershell.informatik.haw-hamburg.de
          proxy_username: infwax193
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }} # Assumes same key for jump and VM

          script: |
            # Navigate to the project directory where files were copied
            cd /home/${{ secrets.VM_USERNAME }}/brieftaube

            echo "Building and starting new services..."
            docker compose down --volumes
            docker compose build --no-cache
            docker compose up -d
            
            echo "âœ… Deployment complete!"