# Dockerfile.proxy

# --- Stage 1: Build the frontend (using Node.js) ---
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
# CORRECTED: Removed the incorrect 'pigeonhole_frontend' path
COPY package.json ./
COPY package-lock.json ./

RUN npm install --frozen-lockfile

# Copy the rest of the frontend source code
# CORRECTED: Removed the incorrect 'pigeonhole_frontend' path
COPY . .

# Build the frontend application
RUN npm run build


# --- Stage 2: Build the Nginx proxy image ---
FROM nginx:alpine

# Remove the default Nginx configuration.
RUN rm /etc/nginx/conf.d/default.conf

# Copy your custom Nginx configuration file.
COPY brieftaube.conf /etc/nginx/conf.d/brieftaube.conf

# Copy the built frontend static files from the 'frontend-builder' stage.
# The path inside the builder stage is now /app/dist/brieftaube/browser
COPY --from=frontend-builder /app/dist/brieftaube/browser /usr/share/nginx/html

EXPOSE 80